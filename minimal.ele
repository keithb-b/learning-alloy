open sequence[Command]

abstract sig Zone{
    ,doors: some Door
}{
    doors = {d: Door | one v: Vehicle | d in v.doorsByZone[this]}
}

one sig People extends Zone{}

abstract sig Cargo extends Zone{}

one sig RearCargo extends Cargo{}

one sig OtherCargo extends Cargo{}

abstract sig Location{}

one sig DriverFront extends Location{}

one sig PassengerFront extends Location{}

one sig PassengerSide extends Location{}

one sig Rear extends Location{}

sig Door{}

abstract sig Vehicle{
    //structural relations
    ,zones: some Zone
    ,locations: some Location
    ,locationsByZone: zones one -> some locations
    ,doorAtLocation: locations one -> one Door
    //derived relations
    ,doors: some Door
    ,doorsByZone: zones one -> some doors
    //state
    ,var lockedDoors: set Door
    ,var unlockedDoors: set Door
}{
     doors = Zone.locationsByZone.doorAtLocation
     doors = lockedDoors + unlockedDoors and no lockedDoors & unlockedDoors //cant't do part on vars, it seems
     doorsByZone = locationsByZone.doorAtLocation
}

sig Transit extends Vehicle {
}{
   zones = 
      People +
      RearCargo +
      OtherCargo

   locations = 
      Rear
    + PassengerSide
    + DriverFront
    + PassengerFront

   locationsByZone = 
      People -> DriverFront
    + People -> PassengerFront
    + RearCargo -> Rear
    + OtherCargo -> PassengerSide
}

//observations
pred Vehicle::zoneLocked[z: Zone]{
    let ds = this.doorsByZone[z] |
            ds in this.lockedDoors and 
        not ds in this.unlockedDoors
}

pred Vehicle::zoneUnchanged[z: Zone]{
    let ds = this.doorsByZone[z] |
            ds in this.lockedDoors   <=> ds in this.lockedDoors'
        and ds in this.unlockedDoors <=> ds in this.unlockedDoors'
}

pred Vehicle::zonesOtherThanUnchanged[z: Zone]{
    all z: this.zones - z | this.zoneUnchanged[z]
}

//actions
pred Vehicle::unlockAZone[z: Zone]{
        this.zonesOtherThanUnchanged[z]
    and let ds = this.doorsByZone[z] |
                    ds in this.unlockedDoors'
            and not ds in this.lockedDoors'
}

pred Vehicle::lockAZone[z: Zone]{
        this.zonesOtherThanUnchanged[z]
    and let ds = this.doorsByZone[z] |
                    ds in this.lockedDoors'
            and not ds in this.unlockedDoors'
}

//user actions
abstract sig Command {
    ,vehicle: one Vehicle
    ,zone: Zone}
sig UnlockCommanded extends Command{
}{
    vehicle.unlockAZone[zone]
}  

/* this doesn't work because both util/sequence[Command] and /util/sequniv both use primed identifiers
sig Script{
    ,futureCommands: seq Command
    ,pastCommands: seq Command
}

so I hack a copy of util/sequence[elem] to not have primes and open that explicitly
*/

sig Script{
    ,futureCommands: Seq
    ,pastCommands: Seq
}

pred Script::step{
    !isEmpty[this.futureCommands] =>
            rest[this.futureCommands, this.futureCommands'] //rest is a pred
        and add[this.pastCommands, first[this.futureCommands], this.pastCommands'] // add is a pred, first is a fun   
}


pred trace{
    //initally
    all v:Vehicle |
        all z: v.zones | v.zoneLocked[z]
    always
        one v: Vehicle |
            one z: Zone |
                v.unlockAZone[z]
    eventually
    all v:Vehicle | 
        all z: v.zones | not v.zoneLocked[z]
}

run {trace} for exactly 1 Transit, 4 Door, 4 Command
