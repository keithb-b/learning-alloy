/*
From https://www.fordservicecontent.com/Ford_Content/vdirsnet/OwnerManual/Home/Content?bookCode=O192169&countryCode=USA&languageCode=en&marketCode=US&viewTech=IE&chapterTitleSelected=G2002375&subTitleSelected=G2048159&topicHRef=G2048160&div=f&variantid=7956&vFilteringEnabled=False&userMarket=GBR
Remote Control
Unlocking the Doors
Press the [open padlock/unlock] button to unlock the front doors. One long flash of the direction indicators confirms that your vehicle has unlocked.
Unlocking the Cargo Doors
Press the [van and open padlock] button on the remote control once to unlock the rear cargo doors. 
Press the [van and open padlock] button again within two seconds to unlock all cargo doors.
Press the [closed padlock] button twice within three seconds. [to double lock]
When you press the unlock button, either all the doors are unlocked or only the driver or driver and passenger doors are unlocked.
You can reprogram the unlocking function so that all doors are unlocked.
 Press and hold the unlock and lock buttons on the remote control simultaneously for at least four seconds with the ignition off.
*/
open util/relation
abstract sig Location{}

abstract sig Zone{
    locations: disj some Location
}

abstract sig Vehicle{
  //structural relations
    ,locations: some Location

    ,zones: some Zone
    ,locationsInZone: zones one -> some locations

    ,fob: disj one Fob

  //state
    ,var disj locked, unlocked: set zones
}{
         total[locationsInZone, zones]     //no unneeded zones
    surjective[locationsInZone, locations] //no dangling locations
  
  //zones know their locations
  //mainly for the benefit of visualizations
    all z: zones | z.locations = locationsInZone[z]
    
  //facts about state
    zones = locked + unlocked
}

one sig DriverFront, PassengerFront, PassengerSide, Rear extends Location{}

one sig People extends Zone{}
abstract sig Cargo extends Zone{}
one sig RearCargo, OtherCargo extends Cargo{}

sig Transit extends Vehicle {
}{
   zones = 
         People 
       + RearCargo 
       + OtherCargo

   locations = 
         Rear
       + PassengerSide
       + DriverFront
       + PassengerFront

   locationsInZone = 
         People     -> DriverFront
       + People     -> PassengerFront
       + RearCargo  -> Rear
       + OtherCargo -> PassengerSide

    fob in TransitFob
}

//observations
pred Vehicle::zoneLocked[z: Zone]{
    z in this.locked
}

pred Vehicle::zoneUnchanged[z: Zone]{
    z & this.locked   = z & this.locked'
    z & this.unlocked = z & this.unlocked'
}

pred Vehicle::zonesOtherThanUnchanged[z: Zone]{
    all z: this.zones - z | this.zoneUnchanged[z]
}

pred Vehicle::otherVehiclesUnchanged{
   all v: Vehicle - this | v.unchanged
}

pred Vehicle::unchanged{
   this.locked'   = this.locked
   this.unlocked' = this.unlocked
}

//actions
pred Vehicle::unlock[z: Zone]{
    this.unlocked' = this.unlocked + z
    this.locked'   = this.locked   - z
    this.zonesOtherThanUnchanged[z]
    this.otherVehiclesUnchanged
    
}

pred Vehicle::lock[z: Zone]{
    this.locked'   = this.locked   + z
    this.unlocked' = this.unlocked - z
    this.zonesOtherThanUnchanged[z]
    this.otherVehiclesUnchanged
}

pred skip{
    all v: Vehicle |
        v.unchanged
}

//invariant frame conditions
fact aZoneIsLockedOrUnlocked{
   all v: Vehicle |
      no v.locked & v.unlocked
}

abstract sig Button{}
one sig OpenPadlock, VanAndOpenPadlock, ClosedPadlock extends Button{}

abstract sig Fob{
  //structural relations
    ,vehicle: disj one Vehicle
    ,buttons: some Button
/*
  //reified events for user actions
    ,actions: disj some FobAction
    ,actionForButton: buttons one -> one actions*/
}

fact fobsAndVehiclesArePaired{
    vehicle.fob in iden
}

sig TransitFob extends Fob{}{
  //structure
    vehicle in Transit

  //vehicle specifics
    buttons =
            OpenPadlock
          + VanAndOpenPadlock
          + ClosedPadlock
}

//actions
pred Fob::userPressed[b: Button]{
         b = OpenPadlock       implies this.vehicle.unlock[People]
    else b = VanAndOpenPadlock implies this.vehicle.unlock[RearCargo]
    else b = ClosedPadlock     implies {
                 this.vehicle.lock[People]
                 this.vehicle.lock[RearCargo]   
                 this.vehicle.lock[OtherCargo]
             }
}

//demonstration    
fact trace{
    //initally
    all v:Vehicle |
        all z: v.zones | v.zoneLocked[z]
    always
        (   skip
         or one f: Fob |
                one b: f.buttons |
                   f.userPressed[b]
        )
}

pred unlockedAsGiven{
    eventually
        all v:Vehicle | 
            all z: RearCargo + People| not v.zoneLocked[z]
}

run {unlockedAsGiven} for exactly 2 Transit, 2 Fob, 16 Time

