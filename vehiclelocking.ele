module VehicleLocking

open Vehicle //includes Door
open Location
open Lock
open Transit

fact doorsAreInOneLocationOnly{
    all v: Vehicle |
        all l, m: v.locations | 
                v.doorAt[l] = v.doorAt[m] <=> l = m 
}


/*fact doorsAreOnOneVehicleOnly{
    all disj v, u: Vehicle |
        none = v.allDoors & u.allDoors
}

not sure whether I prefer this idiom above, or the one below. Neither work, it seems. Cannot instanciate a model with two vans
*/

fact doorsAreOnOneVehicleOnly{
    all d: Door |
        all v, u: Vehicle |
            d in v.allDoors and d in u.allDoors <=> v = u
}

fact noUnneededLocations{
    all l: Location |
        some v: Vehicle |
            l in v.locations
}

fact initalState{
	doorsAreLocked
}

//Checks
//The below should be true of the above:

pred vehiclesHavePlacesForDoors{
    all v: Vehicle |  v.locations != none
}


pred doorsOnAVehicle {
    all d: Door |
        one v: Vehicle |
            d in v.allDoors
}

pred doorsInALocation{
    all d: Door |
        one v: Vehicle |
            one l: v.locations |
                d = v.doorAt[l]
}

pred doorsOnOneVehicle{
    all d: Door |
        1 = #{v: Vehicle | d in v.allDoors}
} 

pred doorsInOneLocationOnly{
    all v: Vehicle |
        all d: v.allDoors |
            #(v.doorAt :> d) = 1
}

pred doorsAreLocked{
    all d: Door | d.lockState = Locked
}

//it's a shame that we can't organize assertions this way, too. [or can we!?]
pred validStructure{
    vehiclesHavePlacesForDoors
    doorsOnAVehicle
    doorsOnOneVehicle
    doorsInALocation
    doorsInOneLocationOnly
}

pred consistentBehaviour{
    doorsAreLocked
}

pred vehicleModel{
    validStructure
    consistentBehaviour
}

check theModelAsChecked{vehicleModel} for exactly 2 Transit, 8 Door, 4 Location, 2 Time expect 0 //counterexamples

//As  we should see demonstrated thus:

run theModelAsRun{vehicleModel} for exactly 2 Transit, 8 Door, 4 Location, 2 Time
