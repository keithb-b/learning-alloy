module VehicleLocking

open Vehicle //includes Door
open Location
open Lock
open Transit

fact doorsAreInOneLocationOnly{
    all v: Vehicle |
        all l, m: v.locations | 
                v.doorAt[l] = v.doorAt[m] <=> l = m 
}

fact locationsOnVehicles{
    all l: Location |
        some v: Vehicle |
            l in v.locations
}

pred doorsAreLocked{
    all d: Door | d.lockState = Locked
}

fact initalState{
	doorsAreLocked
}

//Checks
//The below should be true of the above:

pred vehiclesHavePlacesForDoors{
    all v: Vehicle |  v.locations != none
}


pred doorsOnAVehicle {
    all d: Door |
        one v: Vehicle |
            d in v.allDoors
}

pred doorsInALocation{
    all d: Door |
        one v: Vehicle |
            one l: v.locations |
                d = v.doorAt[l]
}

pred doorsInOneLocationOnly{
    all v: Vehicle |
        all d: v.allDoors |
            #(v.doorAt :> d) = 1
}

pred validStructure{
    vehiclesHavePlacesForDoors
    doorsOnAVehicle
    doorsInALocation
    doorsInOneLocationOnly
}

pred consistentBehaviour{

}

check vehicleModel{
    validStructure
    consistentBehaviour
} for 2 Vehicle, 8 Door, 4 Location, 2 Time expect 0

//As  we should see demonstrated thus:

pred aTransit{
   1 < #Transit
}

run aTransit for 2 Vehicle, 8 Door, 4 Location, 2 Time
